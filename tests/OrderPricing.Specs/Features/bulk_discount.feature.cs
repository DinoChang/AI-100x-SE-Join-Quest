// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace OrderPricing.Specs.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Xunit.TraitAttribute("Category", "bulk_discount")]
    [Xunit.TraitAttribute("Category", "order_pricing")]
    public partial class BulkDiscountPromotionFeature : object, Xunit.IClassFixture<BulkDiscountPromotionFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = new string[] {
                "bulk_discount",
                "order_pricing"};
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "bulk_discount.feature"
#line hidden
        
        public BulkDiscountPromotionFeature(BulkDiscountPromotionFeature.FixtureData fixtureData, OrderPricing_Specs_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "Bulk Discount Promotion", "  As a shopper\n  I want to receive a 20% discount when purchasing 10 or more of t" +
                    "he same product\n  So that I can save money when buying in bulk", ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public void TestInitialize()
        {
        }
        
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 7
  #line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "minimumQuantity",
                        "discountPercentage"});
            table1.AddRow(new string[] {
                        "10",
                        "20"});
#line 8
    testRunner.Given("the bulk discount promotion is active with:", ((string)(null)), table1, "Given ");
#line hidden
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Purchase 12 pieces of the same product - partial bulk discount")]
        [Xunit.TraitAttribute("FeatureTitle", "Bulk Discount Promotion")]
        [Xunit.TraitAttribute("Description", "Purchase 12 pieces of the same product - partial bulk discount")]
        public void Purchase12PiecesOfTheSameProduct_PartialBulkDiscount()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Purchase 12 pieces of the same product - partial bulk discount", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 12
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 7
  this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                            "productName",
                            "quantity",
                            "unitPrice"});
                table2.AddRow(new string[] {
                            "襪子",
                            "12",
                            "100"});
#line 13
    testRunner.When("a customer places an order with:", ((string)(null)), table2, "When ");
#line hidden
                TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                            "totalAmount"});
                table3.AddRow(new string[] {
                            "1000"});
#line 16
    testRunner.Then("the order summary should be:", ((string)(null)), table3, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                            "quantity",
                            "unitPrice",
                            "discountedQuantity",
                            "originalQuantity",
                            "discountedAmount",
                            "originalAmount",
                            "totalAmount"});
                table4.AddRow(new string[] {
                            "12",
                            "100",
                            "10",
                            "2",
                            "800",
                            "200",
                            "1000"});
#line 19
    testRunner.And("the discount calculation should be:", ((string)(null)), table4, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Purchase 27 pieces of the same product - multiple bulk discounts")]
        [Xunit.TraitAttribute("FeatureTitle", "Bulk Discount Promotion")]
        [Xunit.TraitAttribute("Description", "Purchase 27 pieces of the same product - multiple bulk discounts")]
        public void Purchase27PiecesOfTheSameProduct_MultipleBulkDiscounts()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Purchase 27 pieces of the same product - multiple bulk discounts", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 23
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 7
  this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                            "productName",
                            "quantity",
                            "unitPrice"});
                table5.AddRow(new string[] {
                            "襪子",
                            "27",
                            "100"});
#line 24
    testRunner.When("a customer places an order with:", ((string)(null)), table5, "When ");
#line hidden
                TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                            "totalAmount"});
                table6.AddRow(new string[] {
                            "2300"});
#line 27
    testRunner.Then("the order summary should be:", ((string)(null)), table6, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                            "quantity",
                            "unitPrice",
                            "discountedQuantity",
                            "originalQuantity",
                            "discountedAmount",
                            "originalAmount",
                            "totalAmount"});
                table7.AddRow(new string[] {
                            "27",
                            "100",
                            "20",
                            "7",
                            "1600",
                            "700",
                            "2300"});
#line 30
    testRunner.And("the discount calculation should be:", ((string)(null)), table7, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Purchase 10 different products - no bulk discount applied")]
        [Xunit.TraitAttribute("FeatureTitle", "Bulk Discount Promotion")]
        [Xunit.TraitAttribute("Description", "Purchase 10 different products - no bulk discount applied")]
        public void Purchase10DifferentProducts_NoBulkDiscountApplied()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Purchase 10 different products - no bulk discount applied", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 34
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 7
  this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                            "productName",
                            "quantity",
                            "unitPrice"});
                table8.AddRow(new string[] {
                            "商品A",
                            "1",
                            "100"});
                table8.AddRow(new string[] {
                            "商品B",
                            "1",
                            "100"});
                table8.AddRow(new string[] {
                            "商品C",
                            "1",
                            "100"});
                table8.AddRow(new string[] {
                            "商品D",
                            "1",
                            "100"});
                table8.AddRow(new string[] {
                            "商品E",
                            "1",
                            "100"});
                table8.AddRow(new string[] {
                            "商品F",
                            "1",
                            "100"});
                table8.AddRow(new string[] {
                            "商品G",
                            "1",
                            "100"});
                table8.AddRow(new string[] {
                            "商品H",
                            "1",
                            "100"});
                table8.AddRow(new string[] {
                            "商品I",
                            "1",
                            "100"});
                table8.AddRow(new string[] {
                            "商品J",
                            "1",
                            "100"});
#line 35
    testRunner.When("a customer places an order with:", ((string)(null)), table8, "When ");
#line hidden
                TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                            "totalAmount"});
                table9.AddRow(new string[] {
                            "1000"});
#line 47
    testRunner.Then("the order summary should be:", ((string)(null)), table9, "Then ");
#line hidden
#line 50
    testRunner.And("no bulk discount should be applied because the products are different", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Purchase exactly 10 pieces of the same product - full bulk discount")]
        [Xunit.TraitAttribute("FeatureTitle", "Bulk Discount Promotion")]
        [Xunit.TraitAttribute("Description", "Purchase exactly 10 pieces of the same product - full bulk discount")]
        public void PurchaseExactly10PiecesOfTheSameProduct_FullBulkDiscount()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Purchase exactly 10 pieces of the same product - full bulk discount", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 52
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 7
  this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                            "productName",
                            "quantity",
                            "unitPrice"});
                table10.AddRow(new string[] {
                            "襪子",
                            "10",
                            "100"});
#line 53
    testRunner.When("a customer places an order with:", ((string)(null)), table10, "When ");
#line hidden
                TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                            "totalAmount"});
                table11.AddRow(new string[] {
                            "800"});
#line 56
    testRunner.Then("the order summary should be:", ((string)(null)), table11, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                            "quantity",
                            "unitPrice",
                            "discountedQuantity",
                            "originalQuantity",
                            "discountedAmount",
                            "originalAmount",
                            "totalAmount"});
                table12.AddRow(new string[] {
                            "10",
                            "100",
                            "10",
                            "0",
                            "800",
                            "0",
                            "800"});
#line 59
    testRunner.And("the discount calculation should be:", ((string)(null)), table12, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Mixed products with one qualifying for bulk discount")]
        [Xunit.TraitAttribute("FeatureTitle", "Bulk Discount Promotion")]
        [Xunit.TraitAttribute("Description", "Mixed products with one qualifying for bulk discount")]
        public void MixedProductsWithOneQualifyingForBulkDiscount()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Mixed products with one qualifying for bulk discount", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 63
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 7
  this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                            "productName",
                            "quantity",
                            "unitPrice"});
                table13.AddRow(new string[] {
                            "襪子",
                            "15",
                            "100"});
                table13.AddRow(new string[] {
                            "T-shirt",
                            "3",
                            "200"});
#line 64
    testRunner.When("a customer places an order with:", ((string)(null)), table13, "When ");
#line hidden
                TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                            "totalAmount"});
                table14.AddRow(new string[] {
                            "1900"});
#line 68
    testRunner.Then("the order summary should be:", ((string)(null)), table14, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                            "productName",
                            "quantity",
                            "unitPrice",
                            "discountedQuantity",
                            "originalQuantity",
                            "discountedAmount",
                            "originalAmount"});
                table15.AddRow(new string[] {
                            "襪子",
                            "15",
                            "100",
                            "10",
                            "5",
                            "800",
                            "500"});
                table15.AddRow(new string[] {
                            "T-shirt",
                            "3",
                            "200",
                            "0",
                            "3",
                            "0",
                            "600"});
#line 71
    testRunner.And("the discount calculation should be:", ((string)(null)), table15, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                BulkDiscountPromotionFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                BulkDiscountPromotionFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
