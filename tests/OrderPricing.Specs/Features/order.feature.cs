// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace OrderPricing.Specs.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Xunit.TraitAttribute("Category", "order_pricing")]
    public partial class E_CommerceOrderPricingPromotionsFeature : object, Xunit.IClassFixture<E_CommerceOrderPricingPromotionsFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = new string[] {
                "order_pricing"};
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "order.feature"
#line hidden
        
        public E_CommerceOrderPricingPromotionsFeature(E_CommerceOrderPricingPromotionsFeature.FixtureData fixtureData, OrderPricing_Specs_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "E-commerce Order Pricing Promotions", "  As a shopper\n  I want the system to calculate my order total with applicable pr" +
                    "omotions\n  So that I can understand how much to pay and what items I will receiv" +
                    "e", ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public void TestInitialize()
        {
        }
        
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Single product without promotions")]
        [Xunit.TraitAttribute("FeatureTitle", "E-commerce Order Pricing Promotions")]
        [Xunit.TraitAttribute("Description", "Single product without promotions")]
        public void SingleProductWithoutPromotions()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Single product without promotions", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 7
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 8
    testRunner.Given("no promotions are applied", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table16 = new TechTalk.SpecFlow.Table(new string[] {
                            "productName",
                            "quantity",
                            "unitPrice"});
                table16.AddRow(new string[] {
                            "T-shirt",
                            "1",
                            "500"});
#line 9
    testRunner.When("a customer places an order with:", ((string)(null)), table16, "When ");
#line hidden
                TechTalk.SpecFlow.Table table17 = new TechTalk.SpecFlow.Table(new string[] {
                            "totalAmount"});
                table17.AddRow(new string[] {
                            "500"});
#line 12
    testRunner.Then("the order summary should be:", ((string)(null)), table17, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table18 = new TechTalk.SpecFlow.Table(new string[] {
                            "productName",
                            "quantity"});
                table18.AddRow(new string[] {
                            "T-shirt",
                            "1"});
#line 15
    testRunner.And("the customer should receive:", ((string)(null)), table18, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Threshold discount applies when subtotal reaches 1000")]
        [Xunit.TraitAttribute("FeatureTitle", "E-commerce Order Pricing Promotions")]
        [Xunit.TraitAttribute("Description", "Threshold discount applies when subtotal reaches 1000")]
        public void ThresholdDiscountAppliesWhenSubtotalReaches1000()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Threshold discount applies when subtotal reaches 1000", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 19
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table19 = new TechTalk.SpecFlow.Table(new string[] {
                            "threshold",
                            "discount"});
                table19.AddRow(new string[] {
                            "1000",
                            "100"});
#line 20
    testRunner.Given("the threshold discount promotion is configured:", ((string)(null)), table19, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table20 = new TechTalk.SpecFlow.Table(new string[] {
                            "productName",
                            "quantity",
                            "unitPrice"});
                table20.AddRow(new string[] {
                            "T-shirt",
                            "2",
                            "500"});
                table20.AddRow(new string[] {
                            "褲子",
                            "1",
                            "600"});
#line 23
    testRunner.When("a customer places an order with:", ((string)(null)), table20, "When ");
#line hidden
                TechTalk.SpecFlow.Table table21 = new TechTalk.SpecFlow.Table(new string[] {
                            "originalAmount",
                            "discount",
                            "totalAmount"});
                table21.AddRow(new string[] {
                            "1600",
                            "100",
                            "1500"});
#line 27
    testRunner.Then("the order summary should be:", ((string)(null)), table21, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table22 = new TechTalk.SpecFlow.Table(new string[] {
                            "productName",
                            "quantity"});
                table22.AddRow(new string[] {
                            "T-shirt",
                            "2"});
                table22.AddRow(new string[] {
                            "褲子",
                            "1"});
#line 30
    testRunner.And("the customer should receive:", ((string)(null)), table22, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Buy-one-get-one for cosmetics - multiple products")]
        [Xunit.TraitAttribute("FeatureTitle", "E-commerce Order Pricing Promotions")]
        [Xunit.TraitAttribute("Description", "Buy-one-get-one for cosmetics - multiple products")]
        public void Buy_One_Get_OneForCosmetics_MultipleProducts()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Buy-one-get-one for cosmetics - multiple products", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 35
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 36
    testRunner.Given("the buy one get one promotion for cosmetics is active", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table23 = new TechTalk.SpecFlow.Table(new string[] {
                            "productName",
                            "category",
                            "quantity",
                            "unitPrice"});
                table23.AddRow(new string[] {
                            "口紅",
                            "cosmetics",
                            "1",
                            "300"});
                table23.AddRow(new string[] {
                            "粉底液",
                            "cosmetics",
                            "1",
                            "400"});
#line 37
    testRunner.When("a customer places an order with:", ((string)(null)), table23, "When ");
#line hidden
                TechTalk.SpecFlow.Table table24 = new TechTalk.SpecFlow.Table(new string[] {
                            "totalAmount"});
                table24.AddRow(new string[] {
                            "700"});
#line 41
    testRunner.Then("the order summary should be:", ((string)(null)), table24, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table25 = new TechTalk.SpecFlow.Table(new string[] {
                            "productName",
                            "quantity"});
                table25.AddRow(new string[] {
                            "口紅",
                            "2"});
                table25.AddRow(new string[] {
                            "粉底液",
                            "2"});
#line 44
    testRunner.And("the customer should receive:", ((string)(null)), table25, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Buy-one-get-one for cosmetics - same product twice")]
        [Xunit.TraitAttribute("FeatureTitle", "E-commerce Order Pricing Promotions")]
        [Xunit.TraitAttribute("Description", "Buy-one-get-one for cosmetics - same product twice")]
        public void Buy_One_Get_OneForCosmetics_SameProductTwice()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Buy-one-get-one for cosmetics - same product twice", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 49
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 50
    testRunner.Given("the buy one get one promotion for cosmetics is active", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table26 = new TechTalk.SpecFlow.Table(new string[] {
                            "productName",
                            "category",
                            "quantity",
                            "unitPrice"});
                table26.AddRow(new string[] {
                            "口紅",
                            "cosmetics",
                            "2",
                            "300"});
#line 51
    testRunner.When("a customer places an order with:", ((string)(null)), table26, "When ");
#line hidden
                TechTalk.SpecFlow.Table table27 = new TechTalk.SpecFlow.Table(new string[] {
                            "totalAmount"});
                table27.AddRow(new string[] {
                            "600"});
#line 54
    testRunner.Then("the order summary should be:", ((string)(null)), table27, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table28 = new TechTalk.SpecFlow.Table(new string[] {
                            "productName",
                            "quantity"});
                table28.AddRow(new string[] {
                            "口紅",
                            "3"});
#line 57
    testRunner.And("the customer should receive:", ((string)(null)), table28, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Buy-one-get-one for cosmetics - mixed categories")]
        [Xunit.TraitAttribute("FeatureTitle", "E-commerce Order Pricing Promotions")]
        [Xunit.TraitAttribute("Description", "Buy-one-get-one for cosmetics - mixed categories")]
        public void Buy_One_Get_OneForCosmetics_MixedCategories()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Buy-one-get-one for cosmetics - mixed categories", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 61
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 62
    testRunner.Given("the buy one get one promotion for cosmetics is active", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table29 = new TechTalk.SpecFlow.Table(new string[] {
                            "productName",
                            "category",
                            "quantity",
                            "unitPrice"});
                table29.AddRow(new string[] {
                            "襪子",
                            "apparel",
                            "1",
                            "100"});
                table29.AddRow(new string[] {
                            "口紅",
                            "cosmetics",
                            "1",
                            "300"});
#line 63
    testRunner.When("a customer places an order with:", ((string)(null)), table29, "When ");
#line hidden
                TechTalk.SpecFlow.Table table30 = new TechTalk.SpecFlow.Table(new string[] {
                            "totalAmount"});
                table30.AddRow(new string[] {
                            "400"});
#line 67
    testRunner.Then("the order summary should be:", ((string)(null)), table30, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table31 = new TechTalk.SpecFlow.Table(new string[] {
                            "productName",
                            "quantity"});
                table31.AddRow(new string[] {
                            "襪子",
                            "1"});
                table31.AddRow(new string[] {
                            "口紅",
                            "2"});
#line 70
    testRunner.And("the customer should receive:", ((string)(null)), table31, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Multiple promotions stacked")]
        [Xunit.TraitAttribute("FeatureTitle", "E-commerce Order Pricing Promotions")]
        [Xunit.TraitAttribute("Description", "Multiple promotions stacked")]
        public void MultiplePromotionsStacked()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Multiple promotions stacked", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 75
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table32 = new TechTalk.SpecFlow.Table(new string[] {
                            "threshold",
                            "discount"});
                table32.AddRow(new string[] {
                            "1000",
                            "100"});
#line 76
    testRunner.Given("the threshold discount promotion is configured:", ((string)(null)), table32, "Given ");
#line hidden
#line 79
    testRunner.And("the buy one get one promotion for cosmetics is active", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table33 = new TechTalk.SpecFlow.Table(new string[] {
                            "productName",
                            "category",
                            "quantity",
                            "unitPrice"});
                table33.AddRow(new string[] {
                            "T-shirt",
                            "apparel",
                            "3",
                            "500"});
                table33.AddRow(new string[] {
                            "口紅",
                            "cosmetics",
                            "1",
                            "300"});
#line 80
    testRunner.When("a customer places an order with:", ((string)(null)), table33, "When ");
#line hidden
                TechTalk.SpecFlow.Table table34 = new TechTalk.SpecFlow.Table(new string[] {
                            "originalAmount",
                            "discount",
                            "totalAmount"});
                table34.AddRow(new string[] {
                            "1800",
                            "100",
                            "1700"});
#line 84
    testRunner.Then("the order summary should be:", ((string)(null)), table34, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table35 = new TechTalk.SpecFlow.Table(new string[] {
                            "productName",
                            "quantity"});
                table35.AddRow(new string[] {
                            "T-shirt",
                            "3"});
                table35.AddRow(new string[] {
                            "口紅",
                            "2"});
#line 87
    testRunner.And("the customer should receive:", ((string)(null)), table35, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                E_CommerceOrderPricingPromotionsFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                E_CommerceOrderPricingPromotionsFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
